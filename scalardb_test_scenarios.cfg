\* Configuration file for testing ScalarDB verification models
\* These scenarios help verify the correctness of the protocols

\* ============================================================================
\* Small configuration for initial testing
\* ============================================================================

SPECIFICATION Spec
INVARIANTS 
    TypeInvariant
    ConsistencyInvariant
    NoWriteDeleteConflict
    NoPartialStates
    VersionMonotonicity

PROPERTIES
    EventuallyComplete
    NoLostUpdates
    NoDirtyReads

\* Test with 2 transactions and 2 keys
CONSTANTS
    TRANSACTIONS = {t1, t2}
    KEYS = {k1, k2}
    VALUES = {1, 2, 3}
    NULL = 0

\* ============================================================================
\* Specific test scenarios
\* ============================================================================

\* Scenario 1: Write-Write Conflict
\* Both transactions try to update the same key
\* Expected: One transaction should abort

\* Scenario 2: Write Skew (Bank Account Transfer)
\* Initial: k1 = 100, k2 = 100 (two accounts)
\* t1: Read k1, k2; if k1 + k2 >= 100, set k1 = k1 - 100
\* t2: Read k1, k2; if k1 + k2 >= 100, set k2 = k2 - 100
\* Expected in SI: Both may succeed, resulting in negative total
\* Expected in SR: One transaction aborts

\* Scenario 3: Lost Update
\* t1: Read k1 = 10; Write k1 = 11
\* t2: Read k1 = 10; Write k1 = 12  
\* Expected: One transaction aborts (no lost update)

\* Scenario 4: Phantom Read
\* t1: Read all keys where value > 5
\* t2: Insert new key with value = 10
\* t1: Read all keys where value > 5 again
\* Expected in SR: t1 sees consistent results
\* Expected in SI: t1 sees consistent results (from snapshot)

\* Scenario 5: Delete Operation
\* t1: Read k1; Delete k1
\* t2: Read k1; Update k1
\* Expected: Conflict, one transaction aborts

\* ============================================================================
\* Medium configuration for thorough testing
\* ============================================================================

\* CONSTANTS
\*     TRANSACTIONS = {t1, t2, t3}
\*     KEYS = {k1, k2, k3}
\*     VALUES = {1, 2, 3, 4, 5}
\*     NULL = 0

\* ============================================================================
\* Checking specific anomalies
\* ============================================================================

\* For Snapshot Isolation model, also check:
\* PROPERTIES
\*     WriteSkewPossible  \* This should be satisfiable in SI
\*     NoWriteWriteConflicts  \* This should always hold

\* For Strict Serializability model, check:
\* PROPERTIES  
\*     StrictSerializability
\*     ~WriteSkewPossible  \* This should never happen

\* ============================================================================
\* Model checking hints
\* ============================================================================

\* 1. Start with small configurations (2 transactions, 2 keys)
\* 2. Gradually increase size to find edge cases
\* 3. Use VIEW to reduce state space if needed
\* 4. Enable profiling to identify bottlenecks
\* 5. Use symmetry reduction for identical transactions

\* Example VIEW for reducing state space:
\* VIEW == <<store, committedTxns, abortedTxns>>

\* ============================================================================
\* TLC Options
\* ============================================================================

\* Recommended TLC options:
\* -workers 4  (use multiple cores)
\* -depth 30   (sufficient for most scenarios)
\* -seed 12345 (for reproducibility)
\* -coverage 1 (to see state coverage)