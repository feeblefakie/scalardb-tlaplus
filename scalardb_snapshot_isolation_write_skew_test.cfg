\* Configuration specifically designed to test for write skew anomalies in ScalarDB Snapshot Isolation
\* Write skew scenario: Two transactions read disjoint sets, write to keys the other read
\* Example: T1 reads x, writes y; T2 reads y, writes x (both can commit in SI, causing write skew)
SPECIFICATION Spec
INVARIANTS 
    \* Core invariants that should NEVER be violated
    TypeInvariant
    ConsistencyInvariant
    SnapshotAtomicity
    SnapshotNoPartialStates
    SnapshotNoDirtyReads
    FirstCommitterWins
    SnapshotNoLostUpdates
    SnapshotVersionMonotonicity
    SnapshotValidStateTransitions
    \* DO NOT include write skew prevention - we want to detect when it occurs
PROPERTIES
    \* Temporal properties (should hold)
    EventuallyComplete
    SnapshotProgress
    \* Write skew detection property (we want this to be SATISFIABLE)
    \* This means TLC should find executions where write skew occurs
    SnapshotWriteSkewDetection
CONSTANTS
    \* Use exactly 2 keys and 2 transactions for classic write skew scenario
    KEYS = {x, y}
    TRANSACTIONS = {t1, t2}
    VALUES = {v1, v2}
    NULL = null
CHECK_DEADLOCK FALSE
\* Constraints to guide model checker toward write skew scenarios
CONSTRAINT
    \* Limit transaction operations to make verification tractable
    /\ \A t \in TRANSACTIONS : Cardinality(readSet[t]) <= 2
    /\ \A t \in TRANSACTIONS : Cardinality(deleteSet[t]) <= 1
    \* Guide toward write skew scenario: encourage read-write patterns
    /\ \A t \in TRANSACTIONS : 
        \* If transaction reads, it should also write to enable write skew
        (Cardinality(readSet[t]) > 0) => 
        (\E k \in KEYS : writeSet[t][k] # NULL)
ACTION_CONSTRAINT
    \* Focus on scenarios that can lead to write skew
    \* Encourage transactions to proceed to commit phase
    /\ \A t \in TRANSACTIONS : 
        (pc[t] = "ReadWrite" /\ Cardinality(readSet[t]) >= 1 /\ 
         \E k \in KEYS : writeSet[t][k] # NULL) => 
        \/ pc'[t] = "BeginCommit" 
        \/ pc'[t] = "ReadWrite"